FROM php:8.3-cli-alpine

# Install system dependencies and PHP extensions in one layer
RUN apk add --no-cache \
    libpng-dev \
    libzip-dev \
    icu-dev \
    oniguruma-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    gettext \
    unzip \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install pdo_mysql mbstring zip intl gd \
    && docker-php-ext-enable opcache

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

WORKDIR /var/www

# Copy composer files first for better caching
COPY composer.json composer.lock ./

# Install PHP dependencies (skip scripts to avoid errors during build)
RUN composer install --no-dev --optimize-autoloader --no-scripts --prefer-dist

# Copy application files
COPY . .

# Copy Railway environment file
RUN if [ -f .env.railway ]; then cp .env.railway .env; else echo "Warning: .env.railway not found"; fi

# Complete composer installation with autoloader (skip scripts to avoid artisan errors)
RUN composer dump-autoload --optimize --no-dev --no-scripts

# Create required directories and set permissions
RUN mkdir -p storage/app/public \
    storage/framework/cache/data \
    storage/framework/sessions \
    storage/framework/views \
    storage/logs \
    bootstrap/cache \
    && chmod -R 775 storage bootstrap/cache \
    && chown -R www-data:www-data storage bootstrap/cache

# Copy and make startup script executable
COPY start-laravel.sh /start-laravel.sh
RUN chmod +x /start-laravel.sh

# Configure PHP for production
COPY opcache.ini /usr/local/etc/php/conf.d/opcache.ini
COPY php.ini /usr/local/etc/php/conf.d/custom.ini

# Use Railway PORT environment variable
ENV PORT=8080
ENV APP_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD php -r "echo json_encode(['status' => 'ok', 'timestamp' => date('c')]);" || exit 1

# Start application
CMD ["/start-laravel.sh"]